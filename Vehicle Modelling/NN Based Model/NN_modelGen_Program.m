% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 09-Jun-2021 21:07:34
%
% This script assumes these variables are defined:
%
%   nninputs_steer - input data.
%   nntarget - target data.

x = nninputs_steerMz';%nninputs_steer';
t = nntarget';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

%% Sates
gradient_initial = tr.gradient(1)
gradient_final = tr.gradient(end)
mu_initial = tr.mu(1)
mu_final = tr.mu(end)
%% Error Satistics
min_err_YawR = min(e(1,:));
mean_err_YawR = mean(e(1,:));
var_err_YawR = var(e(1,:));
sd_err_YawR = std(e(1,:));
display(min_err_YawR)
display(mean_err_YawR)
display(var_err_YawR)
display(sd_err_YawR)

min_err_Beta = min(e(2,:));
mean_err_Beta = mean(e(2,:));
var_err_Beta = var(e(2,:));
sd_err_Beta = std(e(2,:));
display(min_err_Beta)
display(mean_err_Beta)
display(var_err_Beta)
display(sd_err_Beta)
%% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, ploterrhist(e)
% figure, plotregression(t,y)
% figure, plotfit(net,x,t)

figure, plot(tr.mu,'linewidth',2) 
        xlabel('iterations') 
        ylabel('\mu_{lm}')

figure, plot(tr.gradient,'linewidth',2)
        xlabel('iterations') 
        ylabel('g_{lm}')
        
figure, plotperform(tr)

figure, ploterrhist(e(1,:))

figure, ploterrhist(e(2,:))

figure, plotregression(t(1,:),y(1,:))

figure, plotregression(t(2,:),y(2,:))
%%
% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
