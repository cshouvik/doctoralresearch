#include <dlib/control.h>
#include <fstream>

using namespace std;
using namespace dlib;

double yawRef[] = {0, 0.010472, 0.020942, 0.031411, 0.041876, 0.052336, 0.062791, 0.073238, 0.083678, 0.094108, 0.10453, 0.11494, 0.12533, 0.13572, 0.14608, 0.15643, 0.16677, 0.17708, 0.18738, 0.19766, 0.20791, 0.21814, 0.22835, 0.23853, 0.24869, 0.25882, 0.26892, 0.27899, 0.28903, 0.29904, 0.30902, 0.31896, 0.32887, 0.33874, 0.34857, 0.35837, 0.36812, 0.37784, 0.38752, 0.39715, 0.40674, 0.41628, 0.42578, 0.43523, 0.44464, 0.45399, 0.4633, 0.47255, 0.48175, 0.4909, 0.5, 0.50904, 0.51803, 0.52696, 0.53583, 0.54464, 0.55339, 0.56208, 0.57071, 0.57928, 0.58779, 0.59622, 0.6046, 0.61291, 0.62115, 0.62932, 0.63742, 0.64546, 0.65342, 0.66131, 0.66913, 0.67688, 0.68455, 0.69214, 0.69966, 0.70711, 0.71447, 0.72176, 0.72897, 0.7361, 0.74314, 0.75011, 0.757, 0.7638, 0.77051, 0.77715, 0.78369, 0.79016, 0.79653, 0.80282, 0.80902, 0.81513, 0.82115, 0.82708, 0.83292, 0.83867, 0.84433, 0.84989, 0.85536, 0.86074, 0.86603, 0.87121, 0.87631, 0.8813, 0.8862, 0.89101, 0.89571, 0.90032, 0.90483, 0.90924, 0.91355, 0.91775, 0.92186, 0.92587, 0.92978, 0.93358, 0.93728, 0.94088, 0.94438, 0.94777, 0.95106, 0.95424, 0.95732, 0.96029, 0.96316, 0.96593, 0.96858, 0.97113, 0.97358, 0.97592, 0.97815, 0.98027, 0.98229, 0.9842, 0.986, 0.98769, 0.98927, 0.99075, 0.99211, 0.99337, 0.99452, 0.99556, 0.99649, 0.99731, 0.99803, 0.99863, 0.99912, 0.99951, 0.99978, 0.99995, 1, 0.99995, 0.99978, 0.99951, 0.99912, 0.99863, 0.99803, 0.99731, 0.99649, 0.99556, 0.99452, 0.99337, 0.99211, 0.99075, 0.98927, 0.98769, 0.986, 0.9842, 0.98229, 0.98027, 0.97815, 0.97592, 0.97358, 0.97113, 0.96858, 0.96593, 0.96316, 0.96029, 0.95732, 0.95424, 0.95106, 0.94777, 0.94438, 0.94088, 0.93728, 0.93358, 0.92978, 0.92587, 0.92186, 0.91775, 0.91355, 0.90924, 0.90483, 0.90032, 0.89571, 0.89101, 0.8862, 0.8813, 0.87631, 0.87121, 0.86603, 0.86074, 0.85536, 0.84989, 0.84433, 0.83867, 0.83292, 0.82708, 0.82115, 0.81513, 0.80902, 0.80282, 0.79653, 0.79016, 0.78369, 0.77715, 0.77051, 0.7638, 0.757, 0.75011, 0.74314, 0.7361, 0.72897, 0.72176, 0.71447, 0.70711, 0.69966, 0.69214, 0.68455, 0.67688, 0.66913, 0.66131, 0.65342, 0.64546, 0.63742, 0.62932, 0.62115, 0.61291, 0.6046, 0.59622, 0.58779, 0.57928, 0.57071, 0.56208, 0.55339, 0.54464, 0.53583, 0.52696, 0.51803, 0.50904, 0.5, 0.4909, 0.48175, 0.47255, 0.4633, 0.45399, 0.44464, 0.43523, 0.42578, 0.41628, 0.40674, 0.39715, 0.38752, 0.37784, 0.36812, 0.35837, 0.34857, 0.33874, 0.32887, 0.31896, 0.30902, 0.29904, 0.28903, 0.27899, 0.26892, 0.25882, 0.24869, 0.23853, 0.22835, 0.21814, 0.20791, 0.19766, 0.18738, 0.17708, 0.16677, 0.15643, 0.14608, 0.13572, 0.12533, 0.11494, 0.10453, 0.094108, 0.083678, 0.073238, 0.062791, 0.052336, 0.041876, 0.031411, 0.020942, 0.010472, 1.2246e-16, -0.010472, -0.020942, -0.031411, -0.041876, -0.052336, -0.062791, -0.073238, -0.083678, -0.094108, -0.10453, -0.11494, -0.12533, -0.13572, -0.14608, -0.15643, -0.16677, -0.17708, -0.18738, -0.19766, -0.20791, -0.21814, -0.22835, -0.23853, -0.24869, -0.25882, -0.26892, -0.27899, -0.28903, -0.29904, -0.30902, -0.31896, -0.32887, -0.33874, -0.34857, -0.35837, -0.36812, -0.37784, -0.38752, -0.39715, -0.40674, -0.41628, -0.42578, -0.43523, -0.44464, -0.45399, -0.4633, -0.47255, -0.48175, -0.4909, -0.5, -0.50904, -0.51803, -0.52696, -0.53583, -0.54464, -0.55339, -0.56208, -0.57071, -0.57928, -0.58779, -0.59622, -0.6046, -0.61291, -0.62115, -0.62932, -0.63742, -0.64546, -0.65342, -0.66131, -0.66913, -0.67688, -0.68455, -0.69214, -0.69966, -0.70711, -0.71447, -0.72176, -0.72897, -0.7361, -0.74314, -0.75011, -0.757, -0.7638, -0.77051, -0.77715, -0.78369, -0.79016, -0.79653, -0.80282, -0.80902, -0.81513, -0.82115, -0.82708, -0.83292, -0.83867, -0.84433, -0.84989, -0.85536, -0.86074, -0.86603, -0.87121, -0.87631, -0.8813, -0.8862, -0.89101, -0.89571, -0.90032, -0.90483, -0.90924, -0.91355, -0.91775, -0.92186, -0.92587, -0.92978, -0.93358, -0.93728, -0.94088, -0.94438, -0.94777, -0.95106, -0.95424, -0.95732, -0.96029, -0.96316, -0.96593, -0.96858, -0.97113, -0.97358, -0.97592, -0.97815, -0.98027, -0.98229, -0.9842, -0.986, -0.98769, -0.98927, -0.99075, -0.99211, -0.99337, -0.99452, -0.99556, -0.99649, -0.99731, -0.99803, -0.99863, -0.99912, -0.99951, -0.99978, -0.99995, -1, -0.99995, -0.99978, -0.99951, -0.99912, -0.99863, -0.99803, -0.99731, -0.99649, -0.99556, -0.99452, -0.99337, -0.99211, -0.99075, -0.98927, -0.98769, -0.986, -0.9842, -0.98229, -0.98027, -0.97815, -0.97592, -0.97358, -0.97113, -0.96858, -0.96593, -0.96316, -0.96029, -0.95732, -0.95424, -0.95106, -0.94777, -0.94438, -0.94088, -0.93728, -0.93358, -0.92978, -0.92587, -0.92186, -0.91775, -0.91355, -0.90924, -0.90483, -0.90032, -0.89571, -0.89101, -0.8862, -0.8813, -0.87631, -0.87121, -0.86603, -0.86074, -0.85536, -0.84989, -0.84433, -0.83867, -0.83292, -0.82708, -0.82115, -0.81513, -0.80902, -0.80282, -0.79653, -0.79016, -0.78369, -0.77715, -0.77051, -0.7638, -0.757, -0.75011, -0.74314, -0.7361, -0.72897, -0.72176, -0.71447, -0.70711, -0.69966, -0.69214, -0.68455, -0.67688, -0.66913, -0.66131, -0.65342, -0.64546, -0.63742, -0.62932, -0.62115, -0.61291, -0.6046, -0.59622, -0.58779, -0.57928, -0.57071, -0.56208, -0.55339, -0.54464, -0.53583, -0.52696, -0.51803, -0.50904, -0.5, -0.4909, -0.48175, -0.47255, -0.4633, -0.45399, -0.44464, -0.43523, -0.42578, -0.41628, -0.40674, -0.39715, -0.38752, -0.37784, -0.36812, -0.35837, -0.34857, -0.33874, -0.32887, -0.31896, -0.30902, -0.29904, -0.28903, -0.27899, -0.26892, -0.25882, -0.24869, -0.23853, -0.22835, -0.21814, -0.20791, -0.19766, -0.18738, -0.17708, -0.16677, -0.15643, -0.14608, -0.13572, -0.12533, -0.11494, -0.10453, -0.094108, -0.083678, -0.073238, -0.062791, -0.052336, -0.041876, -0.031411, -0.020942, -0.010472, -2.4493e-16}; //{0, 0.15356, 0.4162, 0.67884, 0.94148, 1.2041, 1.4668, 1.7294, 1.8113, 2.0602, 2.3414, 2.6227, 2.904, 3.1853, 3.4665, 3.7478, 4.0291, 4.2708, 3.8739, 3.29, 2.7062, 2.1223, 1.5385, 0.95461, 0.37076, -0.2131, -0.6276, -0.65125, -0.71573, -0.7802, -0.84468, -0.90915, -0.97363, -1.0381, -1.1026, -1.167, -1.2642, -1.4184, -1.5735, -1.7287, -1.8838, -2.0389, -2.194, -2.3491, -2.5043, -2.6594, -2.7828, -2.6351, -2.4297, -2.2242, -2.0187, -1.8132, -1.6078, -1.4023, -1.1968, -0.99134, -0.78586, -0.58039, -0.52843, -0.51883, -0.46913, -0.41943, -0.36974, -0.32004, -0.27034, -0.22064, -0.17094, -0.12124, -0.071544, -0.021845, 0.027854, 0.077552, 0.12725, 0.18361, 0.16864, 0.14684, 0.12505, 0.10325, 0.081447, 0.059648, 0.037849, 0.01605, -0.0057495};

int main()
{
    const int STATES = 2;
    const int CONTROLS = 1;

    matrix<double, STATES, STATES> A;
    A = 0.8910, -0.0184, 0.4620, 0.8736; //Discrete Plant
    //-4.4021, -0.8307, 20.8696, -5.1868;   //Continous Plant

    matrix<double, STATES, CONTROLS> B;
    B = 0.0342, 0.3809; //Discrete Plant
    //1.6085, 15.8609;     //Continous Plant

    matrix<double, STATES, 1> C;
    C = 0, 0;

    const int HORIZON = 20;

    matrix<double, STATES, 1> Q;
    // Setup Q so that the MPC only cares about matching the target position and
    // ignores the velocity.
    Q = 0.2, 0.45;

    matrix<double, CONTROLS, 1> R, lower, upper;
    R = 0;
    lower = -0.57;
    upper = 0.57;

    mpc<STATES, CONTROLS, HORIZON> controller(A, B, C, Q, R, lower, upper);

    matrix<double, STATES, 1> current_state;
    current_state = 0, 0;

    matrix<double, STATES, 1> out_state;

    //fs.open(outFile, filename);
    std::ofstream outFile("output.csv");
    int iter = 1;
    while (iter < 600)
    {
        matrix<double, STATES, 1> target;
        target = 0, yawRef[iter];
        controller.set_target(target);

        // Find the best control action given our current state.
        matrix<double, CONTROLS, 1> action = controller(current_state);
        current_state = (A * current_state + B * action);
        out_state = current_state;
        cout << "best control: " << trans(action) << "Current State" << current_state << endl;
        outFile << trans(out_state) << " " << yawRef[iter] << ",\n";
        iter++;
    }
    outFile.close();
}