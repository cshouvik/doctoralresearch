#include <dlib/control.h>
#include <fstream>

using namespace std;
using namespace dlib;

double yawRef[] = {0, 1.3548e-18, -5.2307e-20, 1.8591e-18, 3.3496e-19, 5.2891e-18, 2.4692e-19, -1.2516e-18, -6.4204e-18, -2.5957e-18, -9.2181e-19, 5.3141e-18, 6.9832e-18, 3.7112e-18, 8.1149e-19, 2.5276e-18, 3.5967e-18, -4.2945e-18, -4.8466e-18, -1.7327e-18, -3.704e-18, -1.0041e-17, -1.49e-17, 1.7941e-18, 7.7628e-18, 9.222e-18, -9.3126e-18, -6.479e-18, -5.8867e-18, -1.1509e-17, 7.3082e-18, 6.0709e-18, -4.015e-18, 4.1609e-19, 7.3583e-18, 3.1472e-18, -8.7795e-18, 6.8226e-18, 1.3695e-17, 1.3725e-17, -2.6601e-18, -4.9202e-18, -1.19e-17, -2.73e-18, 1.4925e-17, 6.1082e-18, -8.9514e-18, -1.138e-17, -2.283e-19, 5.2749e-18, 2.8411e-18, -6.3641e-18, -1.1398e-17, 1.0888e-18, 2.9984e-18, -8.8883e-18, -1.5422e-17, -3.1079e-07, -3.5362e-05, -0.00029203, -0.0011665, -0.0031723, -0.006781, -0.012309, -0.019899, -0.029549, -0.041148, -0.054506, -0.069139, -0.084114, -0.098423, -0.11151, -0.12338, -0.13426, -0.14425, -0.15322, -0.16099, -0.1675, -0.17279, -0.17699, -0.18015, -0.18229, -0.18344, -0.18361, -0.18287, -0.18128, -0.17891, -0.1758, -0.17198, -0.16751, -0.16244, -0.15681, -0.15067, -0.14408, -0.13707, -0.12967, -0.12192, -0.11384, -0.10545, -0.096797, -0.087909, -0.078804, -0.069499, -0.06001, -0.050358, -0.040572, -0.030678, -0.02069, -0.010614, -0.00045337, 0.0097819, 0.020068, 0.030391, 0.040747, 0.051126, 0.06151, 0.071877, 0.082209, 0.092493, 0.10271, 0.11285, 0.12287, 0.13277, 0.1425, 0.15205, 0.16139, 0.17049, 0.17931, 0.18784, 0.19602, 0.20382, 0.21121, 0.21814, 0.22459, 0.23051, 0.23588, 0.24065, 0.24482, 0.24834, 0.25121, 0.25341, 0.25492, 0.25574, 0.25587, 0.2553, 0.25406, 0.25215, 0.24959, 0.24638, 0.24255, 0.23813, 0.23314, 0.22761, 0.22158, 0.21507, 0.20812, 0.20076, 0.19303, 0.18494, 0.17654, 0.16785, 0.15892, 0.14977, 0.1404, 0.13084, 0.12108, 0.11117, 0.10112, 0.090953, 0.08067, 0.070281, 0.059799, 0.049249, 0.038649, 0.028012, 0.017341, 0.0066366, -0.0040937, -0.014829, -0.025559, -0.036287, -0.047007, -0.057702, -0.068353, -0.078943, -0.089462, -0.099897, -0.11023, -0.12044, -0.13051, -0.1404, -0.15009, -0.15954, -0.16855, -0.17673, -0.18355, -0.18853, -0.19134, -0.19176, -0.18966, -0.18501, -0.17793, -0.16877, -0.15839, -0.14782, -0.13773, -0.12827, -0.11924, -0.1105, -0.10208, -0.094144, -0.086815, -0.080083, -0.073862, -0.068068, -0.062669, -0.057673, -0.05308, -0.04887, -0.044999, -0.041427, -0.038127, -0.035083, -0.032284, -0.029713, -0.02735, -0.025173, -0.023167, -0.02132, -0.01962, -0.018056, -0.016619, -0.015296, -0.014079, -0.012957, -0.011924, -0.010974, -0.0101, -0.0092969, -0.0085573, -0.0078763, -0.0072494, -0.0066721, -0.006141, -0.0056528, -0.005203, -0.0047883, -0.0044066, -0.0040564, -0.0037346, -0.0034379, -0.003164, -0.0029116, -0.0026796, -0.0024662, -0.0022702, -0.0020904, -0.0019247, -0.0017713, -0.0016297, -0.0014996, -0.0013803, -0.0012709, -0.0011701, -0.001077, -0.00099122, -0.00091226, -0.00083972, -0.00077304, -0.00071165, -0.00065507, -0.00060295, -0.00055497, -0.00051084, -0.00047025, -0.00043288, -0.00039847, -0.00036705, -0.00033827, -0.00031143, -0.00028669, -0.00026386, -0.00024267, -0.00022309, -0.00020515, -0.00018881, -0.00017387, -0.0001601, -0.00014735, -0.00013557, -0.00012474, -0.00011481, -0.0001057, -9.7315e-05, -8.9575e-05, -8.2437e-05, -7.5869e-05, -6.9833e-05, -6.4286e-05, -5.918e-05, -5.4475e-05, -0.00028669, -0.00026386, -0.00024267, -0.00022309, -0.00020515, -0.00018881, -0.00017387, -0.0001601, -0.00014735, -0.00013557, -0.00012474, -0.00011481, -0.0001057, -9.7315e-05, -8.9575e-05, -8.2437e-05, -7.5869e-05, -6.9833e-05, -6.4286e-05, -5.918e-05};

double slipRef[] = {0, -1.168e-19, -3.0009e-19, -1.8988e-19, 3.5365e-19, 2.0533e-19, -6.356e-19, -1.3929e-18, -1.4314e-18, -1.3001e-18, -2.1896e-18, -4.635e-18, -7.5056e-18, -7.5853e-18, -2.9964e-18, 1.2502e-18, 1.7792e-18, -2.519e-18, -9.0332e-18, -1.8556e-17, -1.3549e-17, -1.1749e-18, 1.1965e-17, 1.0957e-17, 7.7131e-18, -1.2121e-18, 5.0307e-19, -1.6498e-18, 3.6425e-19, 4.7164e-18, 5.2516e-18, 2.7205e-18, 6.9456e-18, 3.1928e-18, -5.8888e-18, -1.0083e-17, -6.6535e-20, 9.1956e-18, 1.0404e-17, 8.8853e-18, 1.425e-17, 2.7104e-17, 3.976e-17, 3.8832e-17, 1.0824e-17, -1.2112e-17, -1.8248e-17, -1.1825e-17, -4.4429e-18, 1.1859e-18, -1.9299e-18, -9.9776e-18, -1.7507e-17, -2.8349e-17, -3.7678e-17, -1.4495e-17, 6.4219e-18, -8.1562e-08, -8.9562e-06, -7.0014e-05, -0.00026692, -0.00070183, -0.0014732, -0.0026658, -0.0043465, -0.0065577, -0.0093094, -0.012578, -0.016257, -0.020135, -0.024003, -0.027738, -0.03128, -0.034572, -0.037555, -0.040183, -0.042447, -0.044364, -0.045956, -0.047236, -0.048213, -0.048898, -0.049303, -0.049444, -0.049336, -0.048993, -0.048427, -0.047653, -0.046687, -0.045541, -0.044232, -0.042772, -0.041171, -0.039446, -0.037607, -0.035661, -0.033619, -0.031487, -0.029275, -0.026991, -0.024641, -0.02223, -0.019763, -0.017246, -0.014685, -0.012085, -0.0094523, -0.0067901, -0.0041013, -0.0013884, 0.0013453, 0.0040941, 0.0068564, 0.0096315, 0.012415, 0.015203, 0.01799, 0.020773, 0.023546, 0.026307, 0.029048, 0.031764, 0.034448, 0.037095, 0.039695, 0.042243, 0.044731, 0.047149, 0.049489, 0.051738, 0.053887, 0.055928, 0.057852, 0.059648, 0.061305, 0.062815, 0.064169, 0.065358, 0.066376, 0.067218, 0.067878, 0.068353, 0.06864, 0.068739, 0.068651, 0.068378, 0.06792, 0.067282, 0.066468, 0.065487, 0.064346, 0.063053, 0.061615, 0.06004, 0.058338, 0.056517, 0.054586, 0.052554, 0.050428, 0.048215, 0.045922, 0.043561, 0.041139, 0.038659, 0.036125, 0.033544, 0.03092, 0.028259, 0.025562, 0.022833, 0.020074, 0.017289, 0.014484, 0.011661, 0.0088242, 0.0059743, 0.0031136, 0.0002446, -0.0026279, -0.0055031, -0.0083814, -0.01126, -0.014134, -0.017, -0.019855, -0.022696, -0.025518, -0.028316, -0.031085, -0.033819, -0.036511, -0.039154, -0.041736, -0.044209, -0.046487, -0.048462, -0.050032, -0.051101, -0.051589, -0.051432, -0.05059, -0.049068, -0.046935, -0.044376, -0.041608, -0.038782, -0.035979, -0.033253, -0.030661, -0.028246, -0.026025, -0.023986, -0.022107, -0.020371, -0.018765, -0.017283, -0.015919, -0.014663, -0.013505, -0.012436, -0.01145, -0.010542, -0.0097064, -0.0089378, -0.0082306, -0.0075795, -0.00698, -0.006428, -0.00592, -0.0054529, -0.005023, -0.0046272, -0.0042628, -0.0039272, -0.0036185, -0.0033346, -0.0030733, -0.0028328, -0.0026113, -0.0024073, -0.0022196, -0.0020468, -0.0018877, -0.0017414, -0.0016068, -0.0014829, -0.0013688, -0.0012638, -0.0011672, -0.0010783, -0.00099637, -0.00092081, -0.00085132, -0.00078743, -0.00072876, -0.00067487, -0.00062528, -0.00057947, -0.00053716, -0.00049821, -0.00046242, -0.00042952, -0.00039922, -0.0003713, -0.0003456, -0.00032196, -0.00030022, -0.00028022, -0.0002618, -0.00024485, -0.00022923, -0.00021486, -0.00020163, -0.00018946, -0.00017826, -0.00016794, -0.00015845, -0.00014978, -0.0001418, -0.00013438, -0.00012758, -0.00012132, -0.0001155, -0.00011012, -0.00010518, -0.00010066, -9.6506e-05, -9.2673e-05, -8.9145e-05, -8.5906e-05, -8.2932e-05, -8.0199e-05, -7.7683e-05, -7.5364e-05, -7.3228e-05, -7.1262e-05, -6.9454e-05, -6.7791e-05, -6.626e-05, -6.4849e-05, -6.3551e-05, -0.00012758, -0.00012132, -0.0001155, -0.00011012, -0.00010518, -0.00010066, -9.6506e-05, -9.2673e-05, -8.9145e-05, -8.5906e-05, -8.2932e-05, -8.0199e-05, -7.7683e-05, -7.5364e-05, -7.3228e-05, -7.1262e-05, -6.9454e-05, -6.7791e-05, -6.626e-05, -6.4849e-05};
int main()
{
    const int STATES = 2;
    const int CONTROLS = 2;

    matrix<double, STATES, STATES> A;
    A = 0.824126750895409, -4.593266276283263e-05,
    3.317684049238995, -1.849109526195489e-04; //Discrete Plant

    matrix<double, STATES, CONTROLS> B;
    B = -0.021040857415588, -1.263304943779310e-06,
    2.973487400336053, 6.198944570318270e-05; //Discrete Plant

    matrix<double, STATES, 1> C;
    C = 0, 0;

    const int HORIZON = 30;

    matrix<double, STATES, 1> Q;
    // Setup Q so that the MPC only cares about matching the target position and
    // ignores the velocity.
    Q = 1.2370, 2.6975;

    matrix<double, CONTROLS, 1> R, lower, upper;
    R = 3.5966e-01, 3.5966e-06; //0.00035966, 0.0000035966;
    lower = -0.57, -100;
    upper = 0.57, 100;

    mpc<STATES, CONTROLS, HORIZON> controller(A, B, C, Q, R, lower, upper);

    matrix<double, STATES, 1> current_state;
    current_state = 0, 0;

    matrix<double, STATES, 1> out_state;

    //fs.open(outFile, filename);
    std::ofstream outFileState("outputState.csv");
    std::ofstream outFileRef("outputRef.csv");
    std::ofstream outFileControl("outputControl.csv");
    int iter = 1;
    while (iter < 320)
    {
        matrix<double, STATES, 1> target;
        target = slipRef[iter], yawRef[iter];
        controller.set_target(target);

        // Find the best control action given our current state.
        matrix<double, CONTROLS, 1> action = controller(current_state);
        current_state = (A * current_state + B * action);
        out_state = current_state;
        cout << "best control: " << trans(action) << "Current State" << current_state << endl;
        outFileState << trans(out_state) << "\n";
        outFileRef << trans(target) << "\n";
        outFileControl << trans(action) << "\n";
        iter++;
    }
    outFileState.close();
    outFileRef.close();
    outFileControl.close();
}